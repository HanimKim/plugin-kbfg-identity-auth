var:
  domain_name: kbfg-test
  domain_owner:
    id: admin
    password: AdministratoR1
  username: user1@example.com
  password: User1234!

tasks:
  - name: Create Domain
    id: domain
    uses: "@modules/resource"
    spec:
      resource_type: identity.Domain
      data:
        name: ${{ var.domain_name }}
      mode: EXEC
      verb:
        exec: create

  - name: Create DomainOwner
    id: domain_owner
    uses: "@modules/resource"
    spec:
      resource_type: identity.DomainOwner
      data:
        name: Domain Admin
        owner_id: ${{ var.domain_owner.id }}
        password: ${{ var.domain_owner.password }}
        domain_id: ${{ tasks.domain.output.domain_id }}
      mode: EXEC
      verb:
        exec: create


  - name: Create DomainOwner Token
    id: domain_owner_token
    uses: "@modules/resource"
    spec:
      resource_type: identity.Token
      data:
        user_id: ${{ tasks.domain_owner.spec.data.owner_id }}
        user_type: DOMAIN_OWNER
        credentials:
          password: ${{ tasks.domain_owner.spec.data.password }}
        domain_id: ${{ tasks.domain.output.domain_id }}
      mode: EXEC
      verb:
        exec: issue

  - name: Update spacectl configure
    id: shell
    uses: "@modules/shell"
    spec:
      run: |
        spacectl config set api_key ${{ tasks.domain_owner_token.output.access_token }}

  - name: Create Domain Admin Policy
    id: domain_admin_policy
    uses: "modules/resource"
    spec:
      resource_type: identity.Policy
      data:
        name: "Domain Full Acess"
        permissions:
          - "*"
        domain_id: ${{ tasks.domain.output.domain_id }}
      mode: EXEC
      verb:
        exec: create

  - name: Create Domain Admin Role
    id: domain_admin_role
    uses: "modules/resource"
    spec:
      resource_type: identity.Role
      data:
        name: "Domain Admin"
        role_type: DOMAIN
        policies:
          - policy_type: CUSTOM
            policy_id: ${{ tasks.domain_admin_policy.output.policy_id }}
        domain_id: ${{ tasks.domain.output.domain_id }}
      mode: EXEC
      verb:
        exec: create

  - name: Create admin user
    id: admin_user
    uses: "@modules/resource"
    spec:
      resource_type: identity.User
      data:
        user_id: ${{ var.username }}
        password: ${{ var.password }}
        domain_id: ${{ tasks.domain.output.domain_id }}
        backend: LOCAL
      matches:
        - user_id
        - domain_id

  - name: Domain Admin Role Binding
    id: domain_admin_role_binding
    uses: "modules/resource"
    spec:
      resource_type: identity.RoleBinding
      data:
        resource_type: identity.User
        resource_id: ${{ var.username }}
        role_id: ${{ tasks.domain_admin_role.output.role_id }}
        domain_id: ${{ tasks.domain.output.domain_id }}
      mode: EXEC
      verb:
        exec: create

